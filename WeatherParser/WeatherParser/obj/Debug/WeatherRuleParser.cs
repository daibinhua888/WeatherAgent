//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Administrator\Documents\GitHub\SplitTableEngine\Code\WeatherParser\WeatherParser\g4\WeatherRule.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace WeatherParser.g4 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class WeatherRuleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, DIGITAL=7, CHINESEDIGITAL=8, 
		ZENMEYANG=9, QUESTION=10, DAYBEFORETODAY=11, TODAY=12, TOMORROW=13, DAYAFTERTOMORROW=14, 
		MONTH=15, DAY=16;
	public const int
		RULE_compileUnit = 0, RULE_parse = 1, RULE_city_nday = 2, RULE_city = 3, 
		RULE_nday = 4, RULE_relativeExpression = 5, RULE_positiveExpression = 6, 
		RULE_fixDayExpression = 7, RULE_monthly = 8, RULE_date = 9, RULE_number = 10, 
		RULE_weather = 11, RULE_how = 12, RULE_questionSymbol = 13;
	public static readonly string[] ruleNames = {
		"compileUnit", "parse", "city_nday", "city", "nday", "relativeExpression", 
		"positiveExpression", "fixDayExpression", "monthly", "date", "number", 
		"weather", "how", "questionSymbol"
	};

	private static readonly string[] _LiteralNames = {
		null, "'上海'", "'成都'", "'运城'", "'这'", "'天'", "'天气'", null, null, null, 
		null, "'昨天'", "'今天'", "'明天'", "'后天'", "'月'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "DIGITAL", "CHINESEDIGITAL", 
		"ZENMEYANG", "QUESTION", "DAYBEFORETODAY", "TODAY", "TOMORROW", "DAYAFTERTOMORROW", 
		"MONTH", "DAY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WeatherRule.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public WeatherRuleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ParseContext parse() {
			return GetRuleContext<ParseContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; parse();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParseContext : ParserRuleContext {
		public City_ndayContext city_nday() {
			return GetRuleContext<City_ndayContext>(0);
		}
		public WeatherContext weather() {
			return GetRuleContext<WeatherContext>(0);
		}
		public HowContext how() {
			return GetRuleContext<HowContext>(0);
		}
		public QuestionSymbolContext questionSymbol() {
			return GetRuleContext<QuestionSymbolContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; city_nday();
			State = 31; weather();
			State = 33;
			_la = _input.La(1);
			if (_la==ZENMEYANG) {
				{
				State = 32; how();
				}
			}

			State = 36;
			_la = _input.La(1);
			if (_la==QUESTION) {
				{
				State = 35; questionSymbol();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class City_ndayContext : ParserRuleContext {
		public CityContext city() {
			return GetRuleContext<CityContext>(0);
		}
		public NdayContext nday() {
			return GetRuleContext<NdayContext>(0);
		}
		public City_ndayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_city_nday; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterCity_nday(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitCity_nday(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCity_nday(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public City_ndayContext city_nday() {
		City_ndayContext _localctx = new City_ndayContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_city_nday);
		try {
			State = 44;
			switch (_input.La(1)) {
			case T__0:
			case T__1:
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; city();
				State = 39; nday();
				}
				break;
			case T__3:
			case DIGITAL:
			case CHINESEDIGITAL:
			case DAYBEFORETODAY:
			case TODAY:
			case TOMORROW:
			case DAYAFTERTOMORROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; nday();
				State = 42; city();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CityContext : ParserRuleContext {
		public CityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_city; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterCity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitCity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CityContext city() {
		CityContext _localctx = new CityContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_city);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NdayContext : ParserRuleContext {
		public RelativeExpressionContext relativeExpression() {
			return GetRuleContext<RelativeExpressionContext>(0);
		}
		public PositiveExpressionContext positiveExpression() {
			return GetRuleContext<PositiveExpressionContext>(0);
		}
		public FixDayExpressionContext fixDayExpression() {
			return GetRuleContext<FixDayExpressionContext>(0);
		}
		public NdayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nday; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterNday(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitNday(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNday(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NdayContext nday() {
		NdayContext _localctx = new NdayContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_nday);
		try {
			State = 51;
			switch (_input.La(1)) {
			case DAYBEFORETODAY:
			case TODAY:
			case TOMORROW:
			case DAYAFTERTOMORROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; relativeExpression();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; positiveExpression();
				}
				break;
			case DIGITAL:
			case CHINESEDIGITAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; fixDayExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeExpressionContext : ParserRuleContext {
		public ITerminalNode TODAY() { return GetToken(WeatherRuleParser.TODAY, 0); }
		public ITerminalNode TOMORROW() { return GetToken(WeatherRuleParser.TOMORROW, 0); }
		public ITerminalNode DAYAFTERTOMORROW() { return GetToken(WeatherRuleParser.DAYAFTERTOMORROW, 0); }
		public ITerminalNode DAYBEFORETODAY() { return GetToken(WeatherRuleParser.DAYBEFORETODAY, 0); }
		public RelativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterRelativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitRelativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeExpressionContext relativeExpression() {
		RelativeExpressionContext _localctx = new RelativeExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_relativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAYBEFORETODAY) | (1L << TODAY) | (1L << TOMORROW) | (1L << DAYAFTERTOMORROW))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositiveExpressionContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public PositiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterPositiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitPositiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositiveExpressionContext positiveExpression() {
		PositiveExpressionContext _localctx = new PositiveExpressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_positiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(T__3);
			State = 57;
			_la = _input.La(1);
			if (_la==DIGITAL || _la==CHINESEDIGITAL) {
				{
				State = 56; number();
				}
			}

			State = 59; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixDayExpressionContext : ParserRuleContext {
		public MonthlyContext monthly() {
			return GetRuleContext<MonthlyContext>(0);
		}
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public FixDayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixDayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterFixDayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitFixDayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixDayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixDayExpressionContext fixDayExpression() {
		FixDayExpressionContext _localctx = new FixDayExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_fixDayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; monthly();
			State = 62; date();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthlyContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode MONTH() { return GetToken(WeatherRuleParser.MONTH, 0); }
		public MonthlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monthly; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterMonthly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitMonthly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonthly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthlyContext monthly() {
		MonthlyContext _localctx = new MonthlyContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_monthly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; number();
			State = 65; Match(MONTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode DAY() { return GetToken(WeatherRuleParser.DAY, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; number();
			State = 68; Match(DAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode DIGITAL() { return GetToken(WeatherRuleParser.DIGITAL, 0); }
		public ITerminalNode CHINESEDIGITAL() { return GetToken(WeatherRuleParser.CHINESEDIGITAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			_la = _input.La(1);
			if ( !(_la==DIGITAL || _la==CHINESEDIGITAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeatherContext : ParserRuleContext {
		public WeatherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weather; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterWeather(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitWeather(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeather(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeatherContext weather() {
		WeatherContext _localctx = new WeatherContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_weather);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HowContext : ParserRuleContext {
		public ITerminalNode ZENMEYANG() { return GetToken(WeatherRuleParser.ZENMEYANG, 0); }
		public HowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_how; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterHow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitHow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HowContext how() {
		HowContext _localctx = new HowContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_how);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(ZENMEYANG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionSymbolContext : ParserRuleContext {
		public ITerminalNode QUESTION() { return GetToken(WeatherRuleParser.QUESTION, 0); }
		public QuestionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_questionSymbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.EnterQuestionSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWeatherRuleListener typedListener = listener as IWeatherRuleListener;
			if (typedListener != null) typedListener.ExitQuestionSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWeatherRuleVisitor<TResult> typedVisitor = visitor as IWeatherRuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionSymbolContext questionSymbol() {
		QuestionSymbolContext _localctx = new QuestionSymbolContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_questionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(QUESTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x12Q\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x5\x3$\n\x3\x3\x3\x5\x3\'\n\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4/\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x5\x6\x36"+
		"\n\x6\x3\a\x3\a\x3\b\x3\b\x5\b<\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n"+
		"\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x2\x2\x2\x10\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x2\x5\x3\x2\x3\x5\x3\x2\r\x10\x3\x2\t"+
		"\nH\x2\x1E\x3\x2\x2\x2\x4 \x3\x2\x2\x2\x6.\x3\x2\x2\x2\b\x30\x3\x2\x2"+
		"\x2\n\x35\x3\x2\x2\x2\f\x37\x3\x2\x2\x2\xE\x39\x3\x2\x2\x2\x10?\x3\x2"+
		"\x2\x2\x12\x42\x3\x2\x2\x2\x14\x45\x3\x2\x2\x2\x16H\x3\x2\x2\x2\x18J\x3"+
		"\x2\x2\x2\x1AL\x3\x2\x2\x2\x1CN\x3\x2\x2\x2\x1E\x1F\x5\x4\x3\x2\x1F\x3"+
		"\x3\x2\x2\x2 !\x5\x6\x4\x2!#\x5\x18\r\x2\"$\x5\x1A\xE\x2#\"\x3\x2\x2\x2"+
		"#$\x3\x2\x2\x2$&\x3\x2\x2\x2%\'\x5\x1C\xF\x2&%\x3\x2\x2\x2&\'\x3\x2\x2"+
		"\x2\'\x5\x3\x2\x2\x2()\x5\b\x5\x2)*\x5\n\x6\x2*/\x3\x2\x2\x2+,\x5\n\x6"+
		"\x2,-\x5\b\x5\x2-/\x3\x2\x2\x2.(\x3\x2\x2\x2.+\x3\x2\x2\x2/\a\x3\x2\x2"+
		"\x2\x30\x31\t\x2\x2\x2\x31\t\x3\x2\x2\x2\x32\x36\x5\f\a\x2\x33\x36\x5"+
		"\xE\b\x2\x34\x36\x5\x10\t\x2\x35\x32\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x35"+
		"\x34\x3\x2\x2\x2\x36\v\x3\x2\x2\x2\x37\x38\t\x3\x2\x2\x38\r\x3\x2\x2\x2"+
		"\x39;\a\x6\x2\x2:<\x5\x16\f\x2;:\x3\x2\x2\x2;<\x3\x2\x2\x2<=\x3\x2\x2"+
		"\x2=>\a\a\x2\x2>\xF\x3\x2\x2\x2?@\x5\x12\n\x2@\x41\x5\x14\v\x2\x41\x11"+
		"\x3\x2\x2\x2\x42\x43\x5\x16\f\x2\x43\x44\a\x11\x2\x2\x44\x13\x3\x2\x2"+
		"\x2\x45\x46\x5\x16\f\x2\x46G\a\x12\x2\x2G\x15\x3\x2\x2\x2HI\t\x4\x2\x2"+
		"I\x17\x3\x2\x2\x2JK\a\b\x2\x2K\x19\x3\x2\x2\x2LM\a\v\x2\x2M\x1B\x3\x2"+
		"\x2\x2NO\a\f\x2\x2O\x1D\x3\x2\x2\x2\a#&.\x35;";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace WeatherParser.g4
